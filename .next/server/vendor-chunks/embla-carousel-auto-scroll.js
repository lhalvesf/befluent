"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/embla-carousel-auto-scroll";
exports.ids = ["vendor-chunks/embla-carousel-auto-scroll"];
exports.modules = {

/***/ "(ssr)/./node_modules/embla-carousel-auto-scroll/esm/embla-carousel-auto-scroll.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/embla-carousel-auto-scroll/esm/embla-carousel-auto-scroll.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AutoScroll)\n/* harmony export */ });\nconst defaultOptions = {\n  direction: 'forward',\n  speed: 2,\n  startDelay: 1000,\n  active: true,\n  breakpoints: {},\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  rootNode: null\n};\n\nfunction AutoScroll(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let destroyed;\n  let playing = false;\n  let resume = true;\n  let timer = 0;\n  let startDelay;\n  let defaultScrollBehaviour;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, AutoScroll.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    if (emblaApi.scrollSnapList().length <= 1) return;\n    startDelay = options.startDelay;\n    destroyed = false;\n    defaultScrollBehaviour = emblaApi.internalEngine().scrollBody;\n    const {\n      eventStore\n    } = emblaApi.internalEngine();\n    const emblaRoot = emblaApi.rootNode();\n    const root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    const container = emblaApi.containerNode();\n    emblaApi.on('pointerDown', stopScroll);\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startScrollOnSettle);\n    }\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false;\n        stopScroll();\n      });\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true;\n          startScroll();\n        });\n      }\n    }\n    if (options.stopOnFocusIn) {\n      eventStore.add(container, 'focusin', () => {\n        stopScroll();\n        emblaApi.scrollTo(emblaApi.selectedScrollSnap(), true);\n      });\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startScroll);\n      }\n    }\n    if (options.playOnInit) startScroll();\n  }\n  function destroy() {\n    emblaApi.off('pointerDown', stopScroll).off('pointerUp', startScrollOnSettle).off('settle', onSettle);\n    stopScroll();\n    destroyed = true;\n    playing = false;\n  }\n  function startScroll() {\n    if (destroyed || playing) return;\n    if (!resume) return;\n    emblaApi.emit('autoScroll:play');\n    const engine = emblaApi.internalEngine();\n    const {\n      ownerWindow\n    } = engine;\n    timer = ownerWindow.setTimeout(() => {\n      engine.scrollBody = createAutoScrollBehaviour(engine);\n      engine.animation.start();\n    }, startDelay);\n    playing = true;\n  }\n  function stopScroll() {\n    if (destroyed || !playing) return;\n    emblaApi.emit('autoScroll:stop');\n    const engine = emblaApi.internalEngine();\n    const {\n      ownerWindow\n    } = engine;\n    engine.scrollBody = defaultScrollBehaviour;\n    ownerWindow.clearTimeout(timer);\n    timer = 0;\n    playing = false;\n  }\n  function onSettle() {\n    if (resume) startScroll();\n    emblaApi.off('settle', onSettle);\n  }\n  function startScrollOnSettle() {\n    emblaApi.on('settle', onSettle);\n  }\n  function createAutoScrollBehaviour(engine) {\n    const {\n      location,\n      previousLocation,\n      offsetLocation,\n      target,\n      scrollTarget,\n      index,\n      indexPrevious,\n      limit: {\n        reachedMin,\n        reachedMax,\n        constrain\n      },\n      options: {\n        loop\n      }\n    } = engine;\n    const directionSign = options.direction === 'forward' ? -1 : 1;\n    const noop = () => self;\n    let bodyVelocity = 0;\n    let scrollDirection = 0;\n    let rawLocation = location.get();\n    let rawLocationPrevious = 0;\n    let hasSettled = false;\n    function seek(timeStep) {\n      const fixedDeltaTimeSeconds = timeStep / 1000;\n      let directionDiff = 0;\n      previousLocation.set(location);\n      bodyVelocity = directionSign * options.speed * 55;\n      rawLocation += bodyVelocity;\n      location.add(bodyVelocity * fixedDeltaTimeSeconds);\n      target.set(location);\n      directionDiff = rawLocation - rawLocationPrevious;\n      scrollDirection = Math.sign(directionDiff);\n      rawLocationPrevious = rawLocation;\n      const currentIndex = scrollTarget.byDistance(0, false).index;\n      if (index.get() !== currentIndex) {\n        indexPrevious.set(index.get());\n        index.set(currentIndex);\n        emblaApi.emit('select');\n      }\n      const reachedEnd = options.direction === 'forward' ? reachedMin(offsetLocation.get()) : reachedMax(offsetLocation.get());\n      if (!loop && reachedEnd) {\n        hasSettled = true;\n        const constrainedLocation = constrain(location.get());\n        location.set(constrainedLocation);\n        target.set(location);\n        stopScroll();\n      }\n      return self;\n    }\n    const self = {\n      direction: () => scrollDirection,\n      duration: () => -1,\n      velocity: () => bodyVelocity,\n      settled: () => hasSettled,\n      seek,\n      useBaseFriction: noop,\n      useBaseDuration: noop,\n      useFriction: noop,\n      useDuration: noop\n    };\n    return self;\n  }\n  function play(startDelayOverride) {\n    if (typeof startDelayOverride !== 'undefined') {\n      startDelay = startDelayOverride;\n    }\n    resume = true;\n    startScroll();\n  }\n  function stop() {\n    if (playing) stopScroll();\n  }\n  function reset() {\n    if (playing) {\n      stopScroll();\n      startScrollOnSettle();\n    }\n  }\n  function isPlaying() {\n    return playing;\n  }\n  const self = {\n    name: 'autoScroll',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  };\n  return self;\n}\nAutoScroll.globalOptions = undefined;\n\n\n//# sourceMappingURL=embla-carousel-auto-scroll.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/embla-carousel-auto-scroll/esm/embla-carousel-auto-scroll.esm.js\n");

/***/ })

};
;